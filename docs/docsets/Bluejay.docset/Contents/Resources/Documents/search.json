{"Structs/PeripheralIdentifier.html#/s:vV7Bluejay20PeripheralIdentifier4uuidV10Foundation4UUID":{"name":"uuid","abstract":"<p>The UUID of the peripheral.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:FV7Bluejay20PeripheralIdentifiercFT4uuidSS_GSqS0__":{"name":"init(uuid:)","abstract":"<p>Create a PeripheralIdentifier using a UUID string.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:FV7Bluejay20PeripheralIdentifiercFT4uuidV10Foundation4UUID_S0_":{"name":"init(uuid:)","abstract":"<p>Create a PeripheralIdentifier using a UUID.</p>","parent_name":"PeripheralIdentifier"},"Structs/CharacteristicIdentifier.html#/s:vV7Bluejay24CharacteristicIdentifier7serviceVS_17ServiceIdentifier":{"name":"service","abstract":"<p>The service this characteristic belongs to.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:vV7Bluejay24CharacteristicIdentifier4uuidCSo6CBUUID":{"name":"uuid","abstract":"<p>The CBUUID of this characteristic.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:FV7Bluejay24CharacteristicIdentifiercFCSo16CBCharacteristicS0_":{"name":"init(_:)","abstract":"<p>Create a CharacteristicIdentifier using a CBCharacterstic.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:FV7Bluejay24CharacteristicIdentifiercFT4uuidSS7serviceVS_17ServiceIdentifier_S0_":{"name":"init(uuid:service:)","abstract":"<p>Create a CharacteristicIdentifier using a uuid String and a ServiceIdentifier.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:vV7Bluejay24CharacteristicIdentifier9hashValueSi":{"name":"hashValue","abstract":"<p>The hash value of the CBUUID.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:ZFV7Bluejay24CharacteristicIdentifieroi2eeFTS0_S0__Sb":{"name":"==(_:_:)","abstract":"<p>Check equality between two CharacteristicIdentifiers.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:ZFV7Bluejay24CharacteristicIdentifieroi2eeFTS0_CSo16CBCharacteristic_Sb":{"name":"==(_:_:)","abstract":"<p>Check equality between a CharacteristicIdentifier and a CBCharacterstic.</p>","parent_name":"CharacteristicIdentifier"},"Structs/DataPadding.html#/s:FV7Bluejay11DataPaddingcFSiS0_":{"name":"init(_:)","abstract":"<p>Create empty data.</p>","parent_name":"DataPadding"},"Structs/DataPadding.html#/s:FV7Bluejay11DataPadding15toBluetoothDataFT_V10Foundation4Data":{"name":"toBluetoothData()","abstract":"<p>This function is required to conform to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Sendable.html\">Sendable</a></code> protocol, which allows Bluejay to serialize <code>DataPadding</code> when performing write-related operations.</p>","parent_name":"DataPadding"},"Structs/ServiceIdentifier.html#/s:vV7Bluejay17ServiceIdentifier4uuidCSo6CBUUID":{"name":"uuid","abstract":"<p>The CBUUID of this service.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:FV7Bluejay17ServiceIdentifiercFT4uuidSS_S0_":{"name":"init(uuid:)","abstract":"<p>Create a ServiceIdentifier using a string. Please supply a valid 128-bit UUID, or a valid 16 or 32-bit commonly used UUID.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:FV7Bluejay17ServiceIdentifiercFCSo6CBUUIDS0_":{"name":"init(_:)","abstract":"<p>Create a ServiceIdentifier using a CBUUID.</p>","parent_name":"ServiceIdentifier"},"Structs/ScanDiscovery.html#/s:vV7Bluejay13ScanDiscovery10peripheralCSo12CBPeripheral":{"name":"peripheral","abstract":"<p>The <code>CBPeripheral</code> discovered.</p>","parent_name":"ScanDiscovery"},"Structs/ScanDiscovery.html#/s:vV7Bluejay13ScanDiscovery19advertisementPacketGVs10DictionarySSP__":{"name":"advertisementPacket","abstract":"<p>The advertisement packet the discovered peripheral is sending.</p>","parent_name":"ScanDiscovery"},"Structs/ScanDiscovery.html#/s:vV7Bluejay13ScanDiscovery4rssiSi":{"name":"rssi","abstract":"<p>The signal strength of the peripheral discovered.</p>","parent_name":"ScanDiscovery"},"Structs/ScanDiscovery.html":{"name":"ScanDiscovery","abstract":"<p>A model capturing what is found from a scan callback.</p>"},"Structs/ServiceIdentifier.html":{"name":"ServiceIdentifier","abstract":"<p>A wrapper for CBUUID specific to a service to help distinguish it from a CBUUID of a charactersitc.</p>"},"Structs/DataPadding.html":{"name":"DataPadding","abstract":"<p>Helper object that can create empty data to be used as padding in packet construction.</p>"},"Structs/CharacteristicIdentifier.html":{"name":"CharacteristicIdentifier","abstract":"<p>A wrapper for CBUUID specific to a characteristic to help distinguish it from a CBUUID of a service.</p>"},"Structs/PeripheralIdentifier.html":{"name":"PeripheralIdentifier","abstract":"<p>Uniquely identifies a peripheral to the current iOS device. The UUID changes and is different on different iOS devices.</p>"},"Protocols/ConnectionObserver.html#/s:FP7Bluejay18ConnectionObserver18bluetoothAvailableFSbT_":{"name":"bluetoothAvailable(_:)","abstract":"<p>Called whenever Bluetooth availability changes, as well as when an object first subscribes to become a ConnectionObserver.</p>","parent_name":"ConnectionObserver"},"Protocols/ConnectionObserver.html#/s:FP7Bluejay18ConnectionObserver9connectedFT2toCS_10Peripheral_T_":{"name":"connected(to:)","abstract":"<p>Called whenever a peripheral is connected, as well as when an object first subscribes to become a ConnectionObserver and the peripheral is already connected.</p>","parent_name":"ConnectionObserver"},"Protocols/ConnectionObserver.html#/s:FP7Bluejay18ConnectionObserver12disconnectedFT4fromCS_10Peripheral_T_":{"name":"disconnected(from:)","abstract":"<p>Called whenever a peripheral is disconnected.</p>","parent_name":"ConnectionObserver"},"Protocols/Sendable.html#/s:FP7Bluejay8Sendable15toBluetoothDataFT_V10Foundation4Data":{"name":"toBluetoothData()","abstract":"<p>A place to implement your serialization logic.</p>","parent_name":"Sendable"},"Protocols/Receivable.html#/s:FP7Bluejay10ReceivablecFT13bluetoothDataV10Foundation4Data_x":{"name":"init(bluetoothData:)","abstract":"<p>A place to implement your deserialization logic.</p>","parent_name":"Receivable"},"Protocols/RSSIObserver.html#/s:FP7Bluejay12RSSIObserver10peripheralFTCSo12CBPeripheral11didReadRSSICSo8NSNumber5errorGSqPs5Error___T_":{"name":"peripheral(_:didReadRSSI:error:)","abstract":"<p>Called whenever a peripheral&rsquo;s RSSI value changes.</p>","parent_name":"RSSIObserver"},"Protocols/ListenRestorer.html#/s:FP7Bluejay14ListenRestorer17willRestoreListenFT2onVS_24CharacteristicIdentifier_Sb":{"name":"willRestoreListen(on:)","abstract":"<p>Notify the conforming class that there is a characteristic being listened on, but it doesn&rsquo;t have any listen callbacks.</p>","parent_name":"ListenRestorer"},"Protocols/ListenRestorer.html":{"name":"ListenRestorer","abstract":"<p>A class protocol allowing notification of a characteristic being listened on, and provides an opportunity to restore its listen callback during Bluetooth state restoration.</p>"},"Protocols/RSSIObserver.html":{"name":"RSSIObserver","abstract":"<p>A protocol allowing conforming objects to monitor the RSSI changes of a connected peripheral.</p>"},"Protocols/Receivable.html":{"name":"Receivable","abstract":"<p>Protocol to indicate that a type can be received from the Bluetooth connection.</p>"},"Protocols/Sendable.html":{"name":"Sendable","abstract":"<p>Protocol to indicate that a type can be sent via the Bluetooth connection.</p>"},"Protocols/ConnectionObserver.html":{"name":"ConnectionObserver","abstract":"<p>A protocol allowing conforming objects registered to Bluejay to optionally respond to Bluetooth connection events.</p>"},"Extensions/CBPeripheralState.html#/s:FE7BluejayOSC17CBPeripheralState6stringFT_SS":{"name":"string()","abstract":"<p>Returns the name of a <code>CBPeripheralState</code> as a string.</p>","parent_name":"CBPeripheralState"},"Extensions/Data.html#/s:FE7BluejayV10Foundation4Data7extracturFT5startSi6lengthSi_x":{"name":"extract(start:length:)","abstract":"<p>Convenience function to read a range of Data and deserialize it into the specified type.</p>","parent_name":"Data"},"Extensions/Data.html#/s:FE7BluejayV10Foundation4Data15toBluetoothDataFT_S1_":{"name":"toBluetoothData()","abstract":"<p>Allows using Data as is when using Bluejay and working with write-related operations.</p>","parent_name":"Data"},"Extensions/Data.html#/s:FE7BluejayV10Foundation4DatacFT13bluetoothDataS1__S1_":{"name":"init(bluetoothData:)","abstract":"<p>Allows using Data as is when using Bluejay and working with read-related operations.</p>","parent_name":"Data"},"Extensions/String.html#/s:FP7Bluejay10ReceivablecFT13bluetoothDataV10Foundation4Data_x":{"name":"init(bluetoothData:)","parent_name":"String"},"Extensions/String.html#/s:FP7Bluejay8Sendable15toBluetoothDataFT_V10Foundation4Data":{"name":"toBluetoothData()","parent_name":"String"},"Extensions/CBManagerState.html#/s:FE7BluejayOSC14CBManagerState6stringFT_SS":{"name":"string()","abstract":"<p>Returns the name of a <code>CBManagerState</code> as a string.</p>","parent_name":"CBManagerState"},"Extensions/CBService.html#/s:FE7BluejayCSo9CBService14characteristicFT4withCSo6CBUUID_GSqCSo16CBCharacteristic_":{"name":"characteristic(with:)","abstract":"<p>Find a characteristic on a service by CBUUID.</p>","parent_name":"CBService"},"Extensions/CBPeripheral.html#/s:FE7BluejayCSo12CBPeripheral7serviceFT4withCSo6CBUUID_GSqCSo9CBService_":{"name":"service(with:)","abstract":"<p>Find a service on a peripheral by CBUUID.</p>","parent_name":"CBPeripheral"},"Extensions/Integer.html#/s:FE7BluejayPs7Integer15toBluetoothDataFT_V10Foundation4Data":{"name":"toBluetoothData()","abstract":"<p>This function is required to conform to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Sendable.html\">Sendable</a></code>, and figures out the size of the <code>Integer</code> used by the iOS device.</p>","parent_name":"Integer"},"Extensions/Integer.html#/s:FE7BluejayPs7IntegercFT13bluetoothDataV10Foundation4Data_x":{"name":"init(bluetoothData:)","abstract":"<p>This function is required to conform to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Receivable.html\">Receivable</a></code>, and figures out the size of the <code>Integer</code> used by the iOS device.</p>","parent_name":"Integer"},"Extensions/Integer.html":{"name":"Integer","abstract":"<p>Extension to Int to make it Sendable and Receivable.</p>"},"Extensions/CBPeripheral.html":{"name":"CBPeripheral"},"Extensions/CBService.html":{"name":"CBService"},"Extensions/CBManagerState.html":{"name":"CBManagerState"},"Extensions/String.html":{"name":"String","abstract":"<p>Make String Sendable and Receivable.</p>"},"Extensions/Data.html":{"name":"Data"},"Extensions/CBPeripheralState.html":{"name":"CBPeripheralState"},"Enums/RunResult.html#/s:FO7Bluejay9RunResult7successurFMGS0_x_FxGS0_x_":{"name":"success","abstract":"<p>The background task is successful, and the returned value is captured in the associated value.</p>","parent_name":"RunResult"},"Enums/RunResult.html#/s:FO7Bluejay9RunResult9cancelledurFMGS0_x_GS0_x_":{"name":"cancelled","abstract":"<p>The background task is cancelled for a reason.</p>","parent_name":"RunResult"},"Enums/RunResult.html#/s:FO7Bluejay9RunResult7failureurFMGS0_x_FPs5Error_GS0_x_":{"name":"failure","abstract":"<p>The background task has failed unexpectedly with an error.</p>","parent_name":"RunResult"},"Enums/ListenAction.html#/s:FO7Bluejay12ListenAction13keepListeningFMS0_S0_":{"name":"keepListening","abstract":"<p>Keep listening to the characteristic.</p>","parent_name":"ListenAction"},"Enums/ListenAction.html#/s:FO7Bluejay12ListenAction4doneFMS0_S0_":{"name":"done","abstract":"<p>Stop listening to the characteristic.</p>","parent_name":"ListenAction"},"Enums/WriteResult.html#/s:FO7Bluejay11WriteResult7successFMS0_S0_":{"name":"success","abstract":"<p>The write is successful.</p>","parent_name":"WriteResult"},"Enums/WriteResult.html#/s:FO7Bluejay11WriteResult9cancelledFMS0_S0_":{"name":"cancelled","abstract":"<p>The write is cancelled for a reason.</p>","parent_name":"WriteResult"},"Enums/WriteResult.html#/s:FO7Bluejay11WriteResult7failureFMS0_FPs5Error_S0_":{"name":"failure","abstract":"<p>The write has failed unexpectedly with an error.</p>","parent_name":"WriteResult"},"Enums/ConnectionResult.html#/s:FO7Bluejay16ConnectionResult7successFMS0_FCSo12CBPeripheralS0_":{"name":"success","abstract":"<p>The connection is successful, and the peripheral connected is captured in the associated value.</p>","parent_name":"ConnectionResult"},"Enums/ConnectionResult.html#/s:FO7Bluejay16ConnectionResult9cancelledFMS0_S0_":{"name":"cancelled","abstract":"<p>The connection is cancelled for a reason.</p>","parent_name":"ConnectionResult"},"Enums/ConnectionResult.html#/s:FO7Bluejay16ConnectionResult7failureFMS0_FPs5Error_S0_":{"name":"failure","abstract":"<p>The connection has failed unexpectedly with an error.</p>","parent_name":"ConnectionResult"},"Enums/ScanAction.html#/s:FO7Bluejay10ScanAction8continueFMS0_S0_":{"name":"continue","abstract":"<p>Continue scanning.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:FO7Bluejay10ScanAction9blacklistFMS0_S0_":{"name":"blacklist","abstract":"<p>Continue scanning, but don&rsquo;t discover the same peripheral in the current callback again within the same scan session.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:FO7Bluejay10ScanAction4stopFMS0_S0_":{"name":"stop","abstract":"<p>Stop scanning.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:FO7Bluejay10ScanAction7connectFMS0_FTVS_13ScanDiscoveryFOS_16ConnectionResultT__S0_":{"name":"connect","abstract":"<p>Stop scanning, and connect to a discovery.</p>","parent_name":"ScanAction"},"Enums/DisconnectionResult.html#/s:FO7Bluejay19DisconnectionResult7successFMS0_FCSo12CBPeripheralS0_":{"name":"success","abstract":"<p>The disconnection is successful, and the disconnected peripheral is captured in the associated value.</p>","parent_name":"DisconnectionResult"},"Enums/DisconnectionResult.html#/s:FO7Bluejay19DisconnectionResult9cancelledFMS0_S0_":{"name":"cancelled","abstract":"<p>The disconnection is cancelled for a reason.</p>","parent_name":"DisconnectionResult"},"Enums/DisconnectionResult.html#/s:FO7Bluejay19DisconnectionResult7failureFMS0_FPs5Error_S0_":{"name":"failure","abstract":"<p>The disconnection has failed unexpectedly with an error.</p>","parent_name":"DisconnectionResult"},"Enums/BackgroundRestoreMode.html#/s:FO7Bluejay21BackgroundRestoreMode7disableFMS0_S0_":{"name":"disable","abstract":"<p>Bluejay will not receieve state restoration callbacks from CoreBluetooth.</p>","parent_name":"BackgroundRestoreMode"},"Enums/BackgroundRestoreMode.html#/s:FO7Bluejay21BackgroundRestoreMode6enableFMS0_FSSS0_":{"name":"enable","abstract":"<p>Bluejay will receive state restoration callbacks from CoreBluetooth.</p>","parent_name":"BackgroundRestoreMode"},"Enums/BackgroundRestoreMode.html#/s:FO7Bluejay21BackgroundRestoreMode24enableWithListenRestorerFMS0_FTSSPS_14ListenRestorer__S0_":{"name":"enableWithListenRestorer","abstract":"<p>Bluejay will receive state restoration callbacks from CoreBluetooth <strong>and</strong> attempt to restore listens when necessary using the provided listen restorer.</p>","parent_name":"BackgroundRestoreMode"},"Enums/ReadResult.html#/s:FO7Bluejay10ReadResult7successurFMGS0_x_FxGS0_x_":{"name":"success","abstract":"<p>The read is successful and the value read is captured in the associated value.</p>","parent_name":"ReadResult"},"Enums/ReadResult.html#/s:FO7Bluejay10ReadResult9cancelledurFMGS0_x_GS0_x_":{"name":"cancelled","abstract":"<p>The read is cancelled for a reason.</p>","parent_name":"ReadResult"},"Enums/ReadResult.html#/s:FO7Bluejay10ReadResult7failureurFMGS0_x_FPs5Error_GS0_x_":{"name":"failure","abstract":"<p>The read has failed unexpectedly with an error.</p>","parent_name":"ReadResult"},"Enums/ReadResult.html":{"name":"ReadResult","abstract":"<p>Indicates a successful, cancelled, or failed read attempt, where the success case contains the value read.</p>"},"Enums/BackgroundRestoreMode.html":{"name":"BackgroundRestoreMode","abstract":"<p>Determines how Bluejay should opt-in to CoreBluetooth state restoration.</p>"},"Enums/DisconnectionResult.html":{"name":"DisconnectionResult","abstract":"<p>Indicates a successful, cancelled, or failed disconnection attempt, where the success case contains the peripheral disconnected from.</p>"},"Enums/ScanAction.html":{"name":"ScanAction","abstract":"<p>Indicates whether a scan should continue, continue but blacklist the current discovery, stop, or stop and connect.</p>"},"Enums/ConnectionResult.html":{"name":"ConnectionResult","abstract":"<p>Indicates a successful, cancelled, or failed connection attempt, where the success case contains the peripheral connected to.</p>"},"Enums/WriteResult.html":{"name":"WriteResult","abstract":"<p>Indicates a successful, cancelled, or failed write attempt.</p>"},"Enums/ListenAction.html":{"name":"ListenAction","abstract":"<p>Indicates whether the current listen on a characteristic should continue or end.</p>"},"Enums/RunResult.html":{"name":"RunResult","abstract":"<p>Indicates a successful, cancelled, or failed <code>run(backgroundTask:completionOnMainThread:)</code> attempt, where the success case contains the value returned at the end of the background task.</p>"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral4readuRxS_10ReceivablerFzT4fromVS_24CharacteristicIdentifier_x":{"name":"read(from:)","abstract":"<p>Read a value from the specified characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral5writeuRxS_8SendablerFzT2toVS_24CharacteristicIdentifier5valuex_T_":{"name":"write(to:value:)","abstract":"<p>Write a value from the specified characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral6listenuRxS_10ReceivablerFzT2toVS_24CharacteristicIdentifier10completionFxOS_12ListenAction_T_":{"name":"listen(to:completion:)","abstract":"<p>Listen for changes on a specified characterstic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral9endListenFzT2toVS_24CharacteristicIdentifier5errorGSqPs5Error__10completionGSqFOS_11WriteResultT___T_":{"name":"endListen(to:error:completion:)","abstract":"<p>Stop listening to a characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral11flushListenFzT2toVS_24CharacteristicIdentifier10idleWindowSi10completionFT_T__T_":{"name":"flushListen(to:idleWindow:completion:)","abstract":"<p>Flush a listen to a characteristic by receiving and discarding values for the specified duration.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral14writeAndListenu0_RxS_8Sendable_S_10ReceivablerFzT7writeToVS_24CharacteristicIdentifier5valuex8listenToS3_16timeoutInSecondsSi10completionFq_OS_12ListenAction_T_":{"name":"writeAndListen(writeTo:value:listenTo:timeoutInSeconds:completion:)","abstract":"<p>Handle a compound operation consisting of writing on one characterstic followed by listening on another for some streamed data.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:FC7Bluejay22SynchronizedPeripheral16writeAndAssembleu0_RxS_8Sendable_S_10ReceivablerFzT7writeToVS_24CharacteristicIdentifier5valuex8listenToS3_14expectedLengthSi16timeoutInSecondsSi10completionFq_OS_12ListenAction_T_":{"name":"writeAndAssemble(writeTo:value:listenTo:expectedLength:timeoutInSeconds:completion:)","abstract":"<p>Similar to <code>writeAndListen</code>, but use this if you don&rsquo;t know or don&rsquo;t have control over how many packets will be sent to you. You still need to know the total size of the data you&rsquo;re receiving.</p>","parent_name":"SynchronizedPeripheral"},"Classes/Peripheral.html#/s:vC7Bluejay10Peripheral4uuidVS_20PeripheralIdentifier":{"name":"uuid","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:vC7Bluejay10Peripheral4nameGSqSS_":{"name":"name","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral8readRSSIFT_T_":{"name":"readRSSI()","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral8registerFT8observerPS_12RSSIObserver__T_":{"name":"register(observer:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10unregisterFT8observerPS_12RSSIObserver__T_":{"name":"unregister(observer:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral4readuRxS_10ReceivablerFT4fromVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"read(from:completion:)","abstract":"<p>Read from a specified characteristic.</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral5writeuRxS_8SendablerFT2toVS_24CharacteristicIdentifier5valuex10completionFOS_11WriteResultT__T_":{"name":"write(to:value:completion:)","abstract":"<p>Write to a specified characteristic.</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral11isListeningFT2toVS_24CharacteristicIdentifier_Sb":{"name":"isListening(to:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral6listenuRxS_10ReceivablerFT2toVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"listen(to:completion:)","abstract":"<p>Listen for notifications on a specified characterstic.</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral9endListenFT2toVS_24CharacteristicIdentifier5errorGSqPs5Error__10completionGSqFOS_11WriteResultT___T_":{"name":"endListen(to:error:completion:)","abstract":"<p>End listening on a specified characteristic.</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral13restoreListenuRxS_10ReceivablerFT2toVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"restoreListen(to:completion:)","abstract":"<p>Restore a (believed to be) active listening session, so if we start up in response to a notification, we can receive it.</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral19didDiscoverServicesGSqPs5Error___T_":{"name":"peripheral(_:didDiscoverServices:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral29didDiscoverCharacteristicsForCSo9CBService5errorGSqPs5Error___T_":{"name":"peripheral(_:didDiscoverCharacteristicsFor:error:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral16didWriteValueForCSo16CBCharacteristic5errorGSqPs5Error___T_":{"name":"peripheral(_:didWriteValueFor:error:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral17didUpdateValueForCSo16CBCharacteristic5errorGSqPs5Error___T_":{"name":"peripheral(_:didUpdateValueFor:error:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral29didUpdateNotificationStateForCSo16CBCharacteristic5errorGSqPs5Error___T_":{"name":"peripheral(_:didUpdateNotificationStateFor:error:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Peripheral.html#/s:FC7Bluejay10Peripheral10peripheralFTCSo12CBPeripheral11didReadRSSICSo8NSNumber5errorGSqPs5Error___T_":{"name":"peripheral(_:didReadRSSI:error:)","abstract":"<p>Undocumented</p>","parent_name":"Peripheral"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay4uuidV10Foundation4UUID":{"name":"uuid","abstract":"<p>Helps distinguish one Bluejay instance from another.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay20isBluetoothAvailableSb":{"name":"isBluetoothAvailable","abstract":"<p>Allows checking whether Bluetooth is powered on.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay12isConnectingSb":{"name":"isConnecting","abstract":"<p>Allows checking whether Bluejay is currently connecting to a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay11isConnectedSb":{"name":"isConnected","abstract":"<p>Allows checking whether Bluejay is currently connected to a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay15isDisconnectingSb":{"name":"isDisconnecting","abstract":"<p>Allows checking whether Bluejay is currently disconnecting from a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:vC7Bluejay7Bluejay10isScanningSb":{"name":"isScanning","abstract":"<p>Allows checking whether Bluejay is currently scanning.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7BluejaycFT_S0_":{"name":"init()","abstract":"<p>Initializing a Bluejay instance will not yet initialize the CoreBluetooth stack. An explicit call to start running a Bluejay instance after it is intialized is required because in cases where a state resotration is trying to restore a listen on a characteristic, a listen restorer must be available before the CoreBluetooth stack is re-initialized. This two-step startup allows you to insert and gaurantee the setup of your listen restorer in between the initialization of Bluejay and the initialization of the CoreBluetooth stack.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay5startFT18connectionObserverGSqPS_18ConnectionObserver__17backgroundRestoreOS_21BackgroundRestoreMode_T_":{"name":"start(connectionObserver:backgroundRestore:)","abstract":"<p>Starting Bluejay will initialize the CoreBluetooth stack. Initializing a Bluejay instance will not yet initialize the CoreBluetooth stack. An explicit call to start running a Bluejay instance after it is intialized is required because in cases where a state resotration is trying to restore a listen on a characteristic, a listen restorer must be available before the CoreBluetooth stack is re-initialized. This two-step startup allows you to insert and gaurantee the setup of your listen restorer in between the initialization of Bluejay and the initialization of the CoreBluetooth stack.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay16cancelEverythingFGSqCSo7NSError_T_":{"name":"cancelEverything(_:)","abstract":"<p>This will cancel the current and all pending operations in the Bluejay queue, as well as stop any ongoing scan, and disconnect any connected peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay8registerFT8observerPS_18ConnectionObserver__T_":{"name":"register(observer:)","abstract":"<p>Register for notifications on Bluetooth connection events and state changes. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay10unregisterFT8observerPS_18ConnectionObserver__T_":{"name":"unregister(observer:)","abstract":"<p>Unregister for notifications on Bluetooth connection events and state changes. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay4scanFT8durationSd15allowDuplicatesSb18serviceIdentifiersGSqGSaVS_17ServiceIdentifier__9discoveryFTVS_13ScanDiscoveryGSaS2___OS_10ScanAction7expiredGSqFTS2_GSaS2___S3__7stoppedFTGSaS2__GSqPs5Error___T__T_":{"name":"scan(duration:allowDuplicates:serviceIdentifiers:discovery:expired:stopped:)","abstract":"<p>Scan for the peripheral(s) specified.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay12stopScanningFT_T_":{"name":"stopScanning()","abstract":"<p>Stops an ongoing scan if there is one, otherwise it does nothing.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay7connectFTVS_20PeripheralIdentifier10completionFOS_16ConnectionResultT__T_":{"name":"connect(_:completion:)","abstract":"<p>Attempt to connect directly to a known peripheral. The call will fail if Bluetooth is not available, or if Bluejay is already connected. Making a connection request while Bluejay is scanning will also cause Bluejay to stop the current scan for you behind the scene prior to fulfilling your connection request.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay10disconnectFT10completionGSqFOS_19DisconnectionResultT___T_":{"name":"disconnect(completion:)","abstract":"<p>Disconnect the currently connected peripheral. Providing a completion block is not necessary, but useful in most cases.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay4readuRxS_10ReceivablerFT4fromVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"read(from:completion:)","abstract":"<p>Read from the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay5writeuRxS_8SendablerFT2toVS_24CharacteristicIdentifier5valuex10completionFOS_11WriteResultT__T_":{"name":"write(to:value:completion:)","abstract":"<p>Write to the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay6listenuRxS_10ReceivablerFT2toVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"listen(to:completion:)","abstract":"<p>Listen for notifications on the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay9endListenFT2toVS_24CharacteristicIdentifier10completionGSqFOS_11WriteResultT___T_":{"name":"endListen(to:completion:)","abstract":"<p>End listening on the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay13restoreListenuRxS_10ReceivablerFT2toVS_24CharacteristicIdentifier10completionFGOS_10ReadResultx_T__T_":{"name":"restoreListen(to:completion:)","abstract":"<p>Restore a (believed to be) active listening session, so if we start up in response to a notification, we can receive it.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay3runFT14backgroundTaskFzCS_22SynchronizedPeripheralT_22completionOnMainThreadFGOS_9RunResultT__T__T_":{"name":"run(backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This is the simplest one as the background task will not return any typed values back to the completion block on finishing the background task, except for thrown errors, and it also doesn&rsquo;t provide an input for an object that might need thread safe access.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay3runurFT14backgroundTaskFzCS_22SynchronizedPeripheralx22completionOnMainThreadFGOS_9RunResultx_T__T_":{"name":"run(backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This one allows the background task to potentially return a typed value back to the completion block on finishing the background task successfully.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay3runu0_rFT8userDatax14backgroundTaskFzTCS_22SynchronizedPeripheralx_q_22completionOnMainThreadFGOS_9RunResultq__T__T_":{"name":"run(userData:backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This one allows the background task to potentially return a typed value back to the completion block on finishing the background task successfully, as well as supplying an object for thread safe access inside the background task.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:ZFC7Bluejay7Bluejay7combineFT9sendablesGSaPS_8Sendable___V10Foundation4Data":{"name":"combine(sendables:)","abstract":"<p>A helper function to take an array of Sendables and combine their data together.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay28centralManagerDidUpdateStateFCSo16CBCentralManagerT_":{"name":"centralManagerDidUpdateState(_:)","abstract":"<p>Bluejay uses this to figure out whether Bluetooth is available or not.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay14centralManagerFTCSo16CBCentralManager16willRestoreStateGVs10DictionarySSP___T_":{"name":"centralManager(_:willRestoreState:)","abstract":"<p>If Core Bluetooth will restore state, update Bluejay&rsquo;s internal states to match the states of the Core Bluetooth stack by assigning the peripheral to <code>connectingPeripheral</code> or <code>connectedPeripheral</code>, or niling them out, depending on what the restored <code>CBPeripheral</code> state is.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay14centralManagerFTCSo16CBCentralManager10didConnectCSo12CBPeripheral_T_":{"name":"centralManager(_:didConnect:)","abstract":"<p>When connected, update Bluejay&rsquo;s states by updating the values for <code>connectingPeripheral</code>, <code>connectedPeripheral</code>, and <code>shouldAutoReconnect</code>. Also, make sure to broadcast the event to observers, and notify the queue so that the current operation in-flight can process this event and get a chance to finish.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay14centralManagerFTCSo16CBCentralManager23didDisconnectPeripheralCSo12CBPeripheral5errorGSqPs5Error___T_":{"name":"centralManager(_:didDisconnectPeripheral:error:)","abstract":"<p>Figure out whether this is any kinds of disconnection when Bluejay is still connecting, an expected disconnection from a connected state, or an unexpected disconnection from a connected state. An unexpected disconnection from a connected state, such as walking out of range or restarting the Bluetooth device, is the only case where <code>shouldAutoReconnect</code> should be set to true.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay14centralManagerFTCSo16CBCentralManager16didFailToConnectCSo12CBPeripheral5errorGSqPs5Error___T_":{"name":"centralManager(_:didFailToConnect:error:)","abstract":"<p>This mostly happens when either the Bluetooth device or the Core Bluetooth stack somehow only partially completes the negotiation of a connection. For simplicity, Bluejay is currently treating this as a disconnection event, so it can perform all the same clean up logic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:FC7Bluejay7Bluejay14centralManagerFTCSo16CBCentralManager11didDiscoverCSo12CBPeripheral17advertisementDataGVs10DictionarySSP__4rssiCSo8NSNumber_T_":{"name":"centralManager(_:didDiscover:advertisementData:rssi:)","abstract":"<p>This should only be called when the current operation in the queue is a <code>Scan</code> task.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html":{"name":"Bluejay","abstract":"<p>Bluejay is a simple wrapper around CoreBluetooth that focuses on making a common usage case as straight forward as possible: a single connected peripheral that the user is interacting with regularly (think most personal electronics devices that have an associated iOS app: fitness trackers, guitar amps, etc).</p>"},"Classes/Peripheral.html":{"name":"Peripheral","abstract":"<p>Undocumented</p>"},"Classes/SynchronizedPeripheral.html":{"name":"SynchronizedPeripheral","abstract":"<p>A synchronous interface to the Bluetooth peripheral, intended to be used inside the backgroundTask block of <code>run(backgroundTask:completionOnMainThread:)</code> to perform multi-part operations without the need for a complicated callback or promise setup.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enums","abstract":"<p>The following enums are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structs","abstract":"<p>The following structs are available globally.</p>"}}