{"Typealiases.html#/s:7Bluejay17RestoreIdentifiera":{"name":"RestoreIdentifier","abstract":"<p>An alias to make it clearer that the string should be some kind of identifier for restoration, and not just any arbitrary string.</p>"},"Typealiases.html#/s:7Bluejay13LaunchOptionsa":{"name":"LaunchOptions","abstract":"<p>An alias to make it clearer that the dictionary should be the launch options from <code>UIApplicationDelegate</code>.</p>"},"Typealiases.html#/s:7Bluejay14ListenCallbacka":{"name":"ListenCallback","abstract":"<p>Gives name to a specific callback type used for listens.</p>"},"Structs/WarningOptions.html#/s:7Bluejay14WarningOptionsV7defaultACvpZ":{"name":"default","abstract":"<p>Sensible default warning options: all off in favour of not aggressively notifying the user of changes when the app is backgrounded.</p>","parent_name":"WarningOptions"},"Structs/WarningOptions.html#/s:7Bluejay14WarningOptionsV18notifyOnConnection0dE13Disconnection0dE12NotificationACSb_S2btcfc":{"name":"init(notifyOnConnection:notifyOnDisconnection:notifyOnNotification:)","abstract":"<p>Creates a connection options that can specify whether iOS can display a system alert when certain conditions are met while your app is suspended, usually an alert dialog outside of your app in the Home screen for example.</p>","parent_name":"WarningOptions"},"Structs/StartOptions.html#/s:7Bluejay12StartOptionsV20enableBluetoothAlert17backgroundRestoreACSb_AA010BackgroundH4ModeOtcfc":{"name":"init(enableBluetoothAlert:backgroundRestore:)","abstract":"<p>Configurations for starting Bluejay.</p>","parent_name":"StartOptions"},"Structs/StartOptions.html#/s:7Bluejay12StartOptionsV7defaultACvpZ":{"name":"default","abstract":"<p>Convenience factory method to avoid having to use the public initializer.</p>","parent_name":"StartOptions"},"Structs/ServiceIdentifier.html#/s:7Bluejay17ServiceIdentifierV4uuidSo6CBUUIDCvp":{"name":"uuid","abstract":"<p>The <code>CBUUID</code> of this service.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:7Bluejay17ServiceIdentifierV4uuidACSS_tcfc":{"name":"init(uuid:)","abstract":"<p>Create a <code>ServiceIdentifier</code> using a string. Please supply a valid 128-bit UUID, or a valid 16 or 32-bit commonly used UUID.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:7Bluejay17ServiceIdentifierV4uuidACSo6CBUUIDC_tcfc":{"name":"init(uuid:)","abstract":"<p>Create a <code>ServiceIdentifier</code> using a <code>CBUUID</code>.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:7Bluejay17ServiceIdentifierV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Check equality between two ServiceIdentifier.</p>","parent_name":"ServiceIdentifier"},"Structs/ServiceIdentifier.html#/s:7Bluejay17ServiceIdentifierV9hashValueSivp":{"name":"hashValue","abstract":"<p>The hash value of the <code>CBUUID</code>.</p>","parent_name":"ServiceIdentifier"},"Structs/ScanDiscovery.html#/s:7Bluejay13ScanDiscoveryV20peripheralIdentifierAA010PeripheralE0Vvp":{"name":"peripheralIdentifier","abstract":"<p>The unique, persistent identifier associated with the peer.</p>","parent_name":"ScanDiscovery"},"Structs/ScanDiscovery.html#/s:7Bluejay13ScanDiscoveryV19advertisementPacketSDySSypGvp":{"name":"advertisementPacket","abstract":"<p>The advertisement packet the discovered peripheral is sending.</p>","parent_name":"ScanDiscovery"},"Structs/ScanDiscovery.html#/s:7Bluejay13ScanDiscoveryV4rssiSivp":{"name":"rssi","abstract":"<p>The signal strength of the peripheral discovered.</p>","parent_name":"ScanDiscovery"},"Structs/PeripheralIdentifier.html#/s:7Bluejay20PeripheralIdentifierV4uuid10Foundation4UUIDVvp":{"name":"uuid","abstract":"<p>The UUID of the peripheral.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:7Bluejay20PeripheralIdentifierV4nameSSvp":{"name":"name","abstract":"<p>The name of the peripheral.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:7Bluejay20PeripheralIdentifierV11descriptionSSvp":{"name":"description","abstract":"<p>Returns both the name and uuid of the peripheral.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:7Bluejay20PeripheralIdentifierV4uuid4nameAC10Foundation4UUIDV_SSSgtcfc":{"name":"init(uuid:name:)","abstract":"<p>Create a PeripheralIdentifier using a UUID.</p>","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"PeripheralIdentifier"},"Structs/PeripheralIdentifier.html#/s:SH9hashValueSivp":{"name":"hashValue","parent_name":"PeripheralIdentifier"},"Structs/DataPadding.html#/s:7Bluejay11DataPaddingVyACSicfc":{"name":"init(_:)","abstract":"<p>Create empty data.</p>","parent_name":"DataPadding"},"Structs/DataPadding.html#/s:7Bluejay11DataPaddingV011toBluetoothB010Foundation0B0VyF":{"name":"toBluetoothData()","abstract":"<p>This function is required to conform to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Sendable.html\">Sendable</a></code> protocol, which allows Bluejay to serialize <code>DataPadding</code> when performing write-related operations.</p>","parent_name":"DataPadding"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV7serviceAA07ServiceC0Vvp":{"name":"service","abstract":"<p>The service this characteristic belongs to.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV4uuidSo6CBUUIDCvp":{"name":"uuid","abstract":"<p>The <code>CBUUID</code> of this characteristic.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierVyACSo16CBCharacteristicCcfc":{"name":"init(_:)","abstract":"<p>Create a <code>CharacteristicIdentifier</code> using a <code>CBCharacterstic</code>.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV11descriptionSSvp":{"name":"description","abstract":"<p>Returns the essential description of a characteristic.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV4uuid7serviceACSS_AA07ServiceC0Vtcfc":{"name":"init(uuid:service:)","abstract":"<p>Create a <code>CharacteristicIdentifier</code> using a string and a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ServiceIdentifier.html\">ServiceIdentifier</a></code>. Please supply a valid 128-bit UUID, or a valid 16 or 32-bit commonly used UUID.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV4uuid7serviceACSo6CBUUIDC_AA07ServiceC0Vtcfc":{"name":"init(uuid:service:)","abstract":"<p>Create a <code>CharacteristicIdentifier</code> using a <code>CBUUID</code> and a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ServiceIdentifier.html\">ServiceIdentifier</a></code>.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV2eeoiySbAC_So16CBCharacteristicCtFZ":{"name":"==(_:_:)","abstract":"<p>Check equality between a <code>CharacteristicIdentifier</code> and a <code>CBCharacterstic</code>.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Check equality between two CharacteristicIdentifiers.</p>","parent_name":"CharacteristicIdentifier"},"Structs/CharacteristicIdentifier.html#/s:7Bluejay24CharacteristicIdentifierV9hashValueSivp":{"name":"hashValue","abstract":"<p>The hash value of the <code>CBUUID</code>.</p>","parent_name":"CharacteristicIdentifier"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV17restoreIdentifierSSvp":{"name":"restoreIdentifier","abstract":"<p>A restore identifier helps uniquely identify which device is triggering background restoration.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV18backgroundRestorerAA0bF0_pvp":{"name":"backgroundRestorer","abstract":"<p>A background restorer is required to handle the results of a background restoration.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV14listenRestorerAA06ListenF0_pvp":{"name":"listenRestorer","abstract":"<p>A listen restorer is required for any potential unhandled listens when restoring to a connected peripheral.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV13launchOptionsSDySo019UIApplicationLaunchF3KeyaypGSgvp":{"name":"launchOptions","abstract":"<p>The launch options from <code>application(_:didFinishLaunchingWithOptions:)</code> is required to parse the restore identifier.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV11centralKeysSaySSGSgvp":{"name":"centralKeys","abstract":"<p>Convenience return of bluetooth central keys from the launch options.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV015isRestoringFromB0Sbvp":{"name":"isRestoringFromBackground","abstract":"<p>If CoreBluetooth is restoring from background, the bluetooth central keys from launch options will contain the designated restore identifier.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html#/s:7Bluejay23BackgroundRestoreConfigV17restoreIdentifier18backgroundRestorer06listenH013launchOptionsACSS_AA0bH0_pAA06ListenH0_pSDySo019UIApplicationLaunchK3KeyaypGSgtcfc":{"name":"init(restoreIdentifier:backgroundRestorer:listenRestorer:launchOptions:)","abstract":"<p>Initializes a container for all required configurations necessary to support background restoration.</p>","parent_name":"BackgroundRestoreConfig"},"Structs/BackgroundRestoreConfig.html":{"name":"BackgroundRestoreConfig","abstract":"<p>Contains all required configurations for background restoration.</p>"},"Structs/CharacteristicIdentifier.html":{"name":"CharacteristicIdentifier","abstract":"<p>A wrapper for CBUUID specific to a characteristic to help distinguish it from a CBUUID of a service.</p>"},"Structs/DataPadding.html":{"name":"DataPadding","abstract":"<p>Helper object that can create empty data to be used as padding in packet construction.</p>"},"Structs/PeripheralIdentifier.html":{"name":"PeripheralIdentifier","abstract":"<p>Uniquely identifies a peripheral to the current iOS device. The UUID changes and is different on different iOS devices.</p>"},"Structs/ScanDiscovery.html":{"name":"ScanDiscovery","abstract":"<p>A model capturing what is found from a scan callback.</p>"},"Structs/ServiceIdentifier.html":{"name":"ServiceIdentifier","abstract":"<p>A wrapper for <code>CBUUID</code> specific to a service to help distinguish it from a <code>CBUUID</code> of a characteristic.</p>"},"Structs/StartOptions.html":{"name":"StartOptions","abstract":"<p>Wrapper for CBCentralManager initialization configurations when starting a new Bluejay instance.</p>"},"Structs/WarningOptions.html":{"name":"WarningOptions","abstract":"<p>A connection&rsquo;s configurations for system alerts.</p>"},"Protocols/ServiceObserver.html#/s:7Bluejay15ServiceObserverP17didModifyServices4from011invalidatedF0yAA20PeripheralIdentifierV_SayAA0bJ0VGtF":{"name":"didModifyServices(from:invalidatedServices:)","abstract":"<p>Called whenever a peripheral&rsquo;s services change.</p>","parent_name":"ServiceObserver"},"Protocols/Sendable.html#/s:7Bluejay8SendableP15toBluetoothData10Foundation0E0VyF":{"name":"toBluetoothData()","abstract":"<p>A place to implement your serialization logic.</p>","parent_name":"Sendable"},"Protocols/Receivable.html#/s:7Bluejay10ReceivableP13bluetoothDatax10Foundation0D0V_tKcfc":{"name":"init(bluetoothData:)","abstract":"<p>A place to implement your deserialization logic.</p>","parent_name":"Receivable"},"Protocols/RSSIObserver.html#/s:7Bluejay12RSSIObserverP11didReadRSSI4from0E05erroryAA20PeripheralIdentifierV_So8NSNumberCs5Error_pSgtF":{"name":"didReadRSSI(from:RSSI:error:)","abstract":"<p>Called whenever a peripheral&rsquo;s RSSI value changes.</p>","parent_name":"RSSIObserver"},"Protocols/LogObserver.html#/s:7Bluejay11LogObserverP14logFileUpdated4logsySS_tF":{"name":"logFileUpdated(logs:)","abstract":"<p>Called whenever the log file is updated.</p>","parent_name":"LogObserver"},"Protocols/ListenRestorer.html#/s:7Bluejay14ListenRestorerP019didReceiveUnhandledB04from2on4withAA0B13RestoreActionOAA20PeripheralIdentifierV_AA014CharacteristicM0V10Foundation4DataVSgtF":{"name":"didReceiveUnhandledListen(from:on:with:)","abstract":"<p>Called whenever there is an unhandled listen.</p>","parent_name":"ListenRestorer"},"Protocols/DisconnectHandler.html#/s:7Bluejay17DisconnectHandlerP03didB04from4with13willReconnectAA04AutoH4ModeOAA20PeripheralIdentifierV_s5Error_pSgSbtF":{"name":"didDisconnect(from:with:willReconnect:)","abstract":"<p>Notifies the delegate that the peripheral is fully disconnected.</p>","parent_name":"DisconnectHandler"},"Protocols/ConnectionObserver.html#/s:7Bluejay18ConnectionObserverP18bluetoothAvailableyySbF":{"name":"bluetoothAvailable(_:)","abstract":"<p>Called whenever Bluetooth availability changes, as well as when an object first subscribes to become a ConnectionObserver.</p>","parent_name":"ConnectionObserver"},"Protocols/ConnectionObserver.html#/s:7Bluejay18ConnectionObserverP9connected2toyAA20PeripheralIdentifierV_tF":{"name":"connected(to:)","abstract":"<p>Called whenever a peripheral is connected, as well as when an object first subscribes to become a ConnectionObserver and the peripheral is already connected.</p>","parent_name":"ConnectionObserver"},"Protocols/ConnectionObserver.html#/s:7Bluejay18ConnectionObserverP12disconnected4fromyAA20PeripheralIdentifierV_tF":{"name":"disconnected(from:)","abstract":"<p>Called whenever a peripheral is disconnected.</p>","parent_name":"ConnectionObserver"},"Protocols/BackgroundRestorer.html#/s:7Bluejay18BackgroundRestorerP20didRestoreConnection2toAA0bE10CompletionOAA20PeripheralIdentifierV_tF":{"name":"didRestoreConnection(to:)","abstract":"<p>Bluejay was able to restore a connection.</p>","parent_name":"BackgroundRestorer"},"Protocols/BackgroundRestorer.html#/s:7Bluejay18BackgroundRestorerP26didFailToRestoreConnection2to5errorAA0bG10CompletionOAA20PeripheralIdentifierV_s5Error_ptF":{"name":"didFailToRestoreConnection(to:error:)","abstract":"<p>Bluejay failed to restore a connection.</p>","parent_name":"BackgroundRestorer"},"Protocols/BackgroundRestorer.html":{"name":"BackgroundRestorer","abstract":"<p>Protocols for handling the results of a background restoration.</p>"},"Protocols/ConnectionObserver.html":{"name":"ConnectionObserver","abstract":"<p>A protocol allowing conforming objects registered to Bluejay to optionally respond to Bluetooth connection events.</p>"},"Protocols/DisconnectHandler.html":{"name":"DisconnectHandler","abstract":"<p>A protocol allowing a single delegate registered to Bluejay to have a final say at the end of a disconnection, as well as evaluate and control the auto-reconnect behaviour.</p>"},"Protocols.html#/s:7Bluejay10FixedWidthP":{"name":"FixedWidth","abstract":"<p>Marker protocol to help enforce extraction only on primitives or fixed width types.</p>"},"Protocols/ListenRestorer.html":{"name":"ListenRestorer","abstract":"<p>Protocol for handling a listen event that does not have a callback due to background restoration.</p>"},"Protocols/LogObserver.html":{"name":"LogObserver","abstract":"<p>A protocol allowing conforming objects to monitor log file changes.</p>"},"Protocols/RSSIObserver.html":{"name":"RSSIObserver","abstract":"<p>A protocol allowing conforming objects to monitor the RSSI changes of a connected peripheral.</p>"},"Protocols/Receivable.html":{"name":"Receivable","abstract":"<p>Protocol to indicate that a type can be received from the Bluetooth connection.</p>"},"Protocols/Sendable.html":{"name":"Sendable","abstract":"<p>Protocol to indicate that a type can be sent via the Bluetooth connection.</p>"},"Protocols/ServiceObserver.html":{"name":"ServiceObserver","abstract":"<p>A protocol allowing conforming objects to monitor the services changes of a connected peripheral.</p>"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didDiscoverServices:":{"name":"peripheral(_:didDiscoverServices:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did discover services event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didDiscoverCharacteristicsForService:error:":{"name":"peripheral(_:didDiscoverCharacteristicsFor:error:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did discover characteristics event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didWriteValueForCharacteristic:error:":{"name":"peripheral(_:didWriteValueFor:error:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did write to charactersitic event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didUpdateValueForCharacteristic:error:":{"name":"peripheral(_:didUpdateValueFor:error:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did receive a notification/value from a characteristic event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didUpdateNotificationStateForCharacteristic:error:":{"name":"peripheral(_:didUpdateNotificationStateFor:error:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did turn on or off notification/listening on a characteristic event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didReadRSSI:error:":{"name":"peripheral(_:didReadRSSI:error:)","abstract":"<p>Captures CoreBluetooth&rsquo;s did read RSSI event and pass it to Bluejay&rsquo;s queue for processing.</p>","parent_name":"Peripheral"},"Extensions/Peripheral.html#/c:@CM@Bluejay@objc(cs)Peripheral(im)peripheral:didModifyServices:":{"name":"peripheral(_:didModifyServices:)","abstract":"<p>Called when the peripheral removed or added services.</p>","parent_name":"Peripheral"},"Extensions/BinaryInteger.html#/s:Sz7BluejayE15toBluetoothData10Foundation0D0VyF":{"name":"toBluetoothData()","abstract":"<p>This function is required to conform to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Sendable.html\">Sendable</a></code>, and figures out the size of the <code>Integer</code> used by the iOS device.</p>","parent_name":"BinaryInteger"},"Extensions/BinaryInteger.html#/s:Sz7BluejayE13bluetoothDatax10Foundation0C0V_tcfc":{"name":"init(bluetoothData:)","abstract":"<p>This function is required to conform to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Receivable.html\">Receivable</a></code>, and figures out the size of the <code>Integer</code> used by the iOS device.</p>","parent_name":"BinaryInteger"},"Extensions/Data.html#/s:10Foundation4DataV7BluejayE7extract5start6lengthxSi_SitKAD10FixedWidthRzlF":{"name":"extract(start:length:)","abstract":"<p>Convenience function to read a range of Data and deserialize it into a fixed width type.</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV7BluejayE7extract5start6lengthACSi_SitKF":{"name":"extract(start:length:)","abstract":"<p>Convenience function to extract a range of Data.</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV7BluejayE7extract5start6length8encodingSSSgSi_SiSSAAE8EncodingVtKF":{"name":"extract(start:length:encoding:)","abstract":"<p>Convenience function to read a range of Data and deserialize it into a String.</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV7BluejayE011toBluetoothB0ACyF":{"name":"toBluetoothData()","abstract":"<p>Allows using Data as is when using Bluejay and working with write-related operations.</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV7BluejayE09bluetoothB0A2C_tcfc":{"name":"init(bluetoothData:)","abstract":"<p>Allows using Data as is when using Bluejay and working with read-related operations.</p>","parent_name":"Data"},"Extensions/CBService.html#/s:So9CBServiceC7BluejayE14characteristic4withSo16CBCharacteristicCSgSo6CBUUIDC_tF":{"name":"characteristic(with:)","abstract":"<p>Find a characteristic on a service by CBUUID.</p>","parent_name":"CBService"},"Extensions/CBPeripheralState.html#/s:So17CBPeripheralStateV7BluejayE6stringSSyF":{"name":"string()","abstract":"<p>Returns the name of a <code>CBPeripheralState</code> as a string.</p>","parent_name":"CBPeripheralState"},"Extensions/CBPeripheral.html#/s:So12CBPeripheralC7BluejayE7service4withSo9CBServiceCSgSo6CBUUIDC_tF":{"name":"service(with:)","abstract":"<p>Find a service on a peripheral by CBUUID.</p>","parent_name":"CBPeripheral"},"Extensions/CBManagerState.html#/s:So14CBManagerStateV7BluejayE6stringSSyF":{"name":"string()","abstract":"<p>Returns the name of a <code>CBManagerState</code> as a string.</p>","parent_name":"CBManagerState"},"Extensions/CBManagerState.html":{"name":"CBManagerState"},"Extensions/CBPeripheral.html":{"name":"CBPeripheral"},"Extensions/CBPeripheralState.html":{"name":"CBPeripheralState"},"Extensions/CBService.html":{"name":"CBService"},"Extensions/Data.html":{"name":"Data"},"Extensions/BinaryInteger.html":{"name":"BinaryInteger","abstract":"<p>Extension to Int to make it Sendable and Receivable.</p>"},"Extensions/Peripheral.html":{"name":"Peripheral"},"Enums/WriteResult.html#/s:7Bluejay11WriteResultO7successyA2CmF":{"name":"success","abstract":"<p>The write is successful.</p>","parent_name":"WriteResult"},"Enums/WriteResult.html#/s:7Bluejay11WriteResultO7failureyACs5Error_pcACmF":{"name":"failure(_:)","abstract":"<p>The write has failed unexpectedly with an error.</p>","parent_name":"WriteResult"},"Enums/StartMode.html#/s:7Bluejay9StartModeO3newyAcA0B7OptionsVcACmF":{"name":"new(_:)","abstract":"<p>Start Bluejay using a new CBCentralManager.</p>","parent_name":"StartMode"},"Enums/StartMode.html#/s:7Bluejay9StartModeO3useyACSo16CBCentralManagerC_So12CBPeripheralCSgtcACmF":{"name":"use(manager:peripheral:)","abstract":"<p>Start Bluejay using an existing CBCentralManager.</p>","parent_name":"StartMode"},"Enums/ScanAction.html#/s:7Bluejay10ScanActionO8continueyA2CmF":{"name":"continue","abstract":"<p>Continue scanning.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:7Bluejay10ScanActionO9blacklistyA2CmF":{"name":"blacklist","abstract":"<p>Continue scanning, but don&rsquo;t discover the same peripheral in the current callback again within the same scan session.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:7Bluejay10ScanActionO4stopyA2CmF":{"name":"stop","abstract":"<p>Stop scanning.</p>","parent_name":"ScanAction"},"Enums/ScanAction.html#/s:7Bluejay10ScanActionO7connectyAcA0B9DiscoveryV_AA7TimeoutOAA14WarningOptionsVyAA16ConnectionResultOctcACmF":{"name":"connect(_:_:_:_:)","abstract":"<p>Stop scanning, and connect to a discovery.</p>","parent_name":"ScanAction"},"Enums/RunResult.html#/s:7Bluejay9RunResultO7successyACyxGxcAEmlF":{"name":"success(_:)","abstract":"<p>The background task is successful, and the returned value is captured in the associated value.</p>","parent_name":"RunResult"},"Enums/RunResult.html#/s:7Bluejay9RunResultO7failureyACyxGs5Error_pcAEmlF":{"name":"failure(_:)","abstract":"<p>The background task has failed unexpectedly with an error.</p>","parent_name":"RunResult"},"Enums/ReadResult.html#/s:7Bluejay10ReadResultO7successyACyxGxcAEmlF":{"name":"success(_:)","abstract":"<p>The read is successful and the value read is captured in the associated value.</p>","parent_name":"ReadResult"},"Enums/ReadResult.html#/s:7Bluejay10ReadResultO7failureyACyxGs5Error_pcAEmlF":{"name":"failure(_:)","abstract":"<p>The read has failed unexpectedly with an error.</p>","parent_name":"ReadResult"},"Enums/MultipleListenOption.html#/s:7Bluejay20MultipleListenOptionO4trapyA2CmF":{"name":"trap","abstract":"<p>New listen and its new callback on the same characteristic will not overwrite an existing listen.</p>","parent_name":"MultipleListenOption"},"Enums/MultipleListenOption.html#/s:7Bluejay20MultipleListenOptionO11replaceableyA2CmF":{"name":"replaceable","abstract":"<p>New listens and its new callback on the same characteristic will replace the existing listen.</p>","parent_name":"MultipleListenOption"},"Enums/ListenRestoreAction.html#/s:7Bluejay19ListenRestoreActionO18promiseRestorationyA2CmF":{"name":"promiseRestoration","abstract":"<p>Bluejay will continue to receive but do nothing with the incoming listen events until a new listener is installed.</p>","parent_name":"ListenRestoreAction"},"Enums/ListenRestoreAction.html#/s:7Bluejay19ListenRestoreActionO04stopB0yA2CmF":{"name":"stopListen","abstract":"<p>Bluejay will attempt to turn off notifications on the peripheral.</p>","parent_name":"ListenRestoreAction"},"Enums/ListenAction.html#/s:7Bluejay12ListenActionO13keepListeningyA2CmF":{"name":"keepListening","abstract":"<p>Keep listening to the characteristic.</p>","parent_name":"ListenAction"},"Enums/ListenAction.html#/s:7Bluejay12ListenActionO4doneyA2CmF":{"name":"done","abstract":"<p>Stop listening to the characteristic.</p>","parent_name":"ListenAction"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO20bluetoothUnavailableyA2CmF":{"name":"bluetoothUnavailable","abstract":"<p>Bluetooth is either turned off or unavailable.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO24multipleScanNotSupportedyA2CmF":{"name":"multipleScanNotSupported","abstract":"<p>Bluejay does not support another scanning request if Bluejay is still scanning.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO27multipleConnectNotSupportedyA2CmF":{"name":"multipleConnectNotSupported","abstract":"<p>Bluejay does not support another connection request if Bluejay is already connected or still connecting.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO30multipleDisconnectNotSupportedyA2CmF":{"name":"multipleDisconnectNotSupported","abstract":"<p>Bluejay does not support another disconnection request if Bluejay is still disconnecting.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO18connectionTimedOutyA2CmF":{"name":"connectionTimedOut","abstract":"<p>A connection request in Bluejay has timed out.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO12notConnectedyA2CmF":{"name":"notConnected","abstract":"<p>Bluejay is not connected to a peripheral.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO14missingServiceyAcA0D10IdentifierVcACmF":{"name":"missingService(_:)","abstract":"<p>A Bluetooth service is not found.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO21missingCharacteristicyAcA0D10IdentifierVcACmF":{"name":"missingCharacteristic(_:)","abstract":"<p>A Bluetooth characteristic is not found.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO9cancelledyA2CmF":{"name":"cancelled","abstract":"<p>A Bluetooth operation is cancelled.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO18explicitDisconnectyA2CmF":{"name":"explicitDisconnect","abstract":"<p>Bluejay disconnect is called.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO20unexpectedDisconnectyA2CmF":{"name":"unexpectedDisconnect","abstract":"<p>Bluejay disconnected unexpectedly.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO16disconnectQueuedyA2CmF":{"name":"disconnectQueued","abstract":"<p>A disconnection operation is queued.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO14listenTimedOutyA2CmF":{"name":"listenTimedOut","abstract":"<p>An attempt to listen on a characteristic has timed out.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO10readFailedyA2CmF":{"name":"readFailed","abstract":"<p>An attempt to read a characteristic has failed.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO11writeFailedyA2CmF":{"name":"writeFailed","abstract":"<p>An attempt to write a characteristic has failed.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO11missingDatayA2CmF":{"name":"missingData","abstract":"<p>An attempt to read a value from a characteristic has returned no data unexpectedly.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO15dataOutOfBoundsyACSi_S2itcACmF":{"name":"dataOutOfBounds(start:length:count:)","abstract":"<p>An attempt to read a range of data has failed due to incorrect bounds or an unexpected length.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO20unexpectedPeripheralyAcA0D10IdentifierVcACmF":{"name":"unexpectedPeripheral(_:)","abstract":"<p>An unexpected peripheral is cached and retrieved from CoreBluetooth.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO39allowDuplicatesInBackgroundNotSupportedyA2CmF":{"name":"allowDuplicatesInBackgroundNotSupported","abstract":"<p>iOS will not continue scanning in the background if allow duplicates is turned on.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO37missingServiceIdentifiersInBackgroundyA2CmF":{"name":"missingServiceIdentifiersInBackground","abstract":"<p>iOS will not continue scanning in the background if no service identifiers are specified.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO21backgroundTaskRunningyA2CmF":{"name":"backgroundTaskRunning","abstract":"<p>Bluejay does not support further Bluetooth operations while a Bluejay background task is still running.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO34multipleBackgroundTaskNotSupportedyA2CmF":{"name":"multipleBackgroundTaskNotSupported","abstract":"<p>Bluejay does not support another Bluejay background task when there is already one that is still running.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO15indefiniteFlushyA2CmF":{"name":"indefiniteFlush","abstract":"<p>Indefinite flush will not exit.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO7stoppedyA2CmF":{"name":"stopped","abstract":"<p>Bluejay has stopped.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO31backgroundRestorationInProgressyA2CmF":{"name":"backgroundRestorationInProgress","abstract":"<p>Bluejay cannot perform certain actions when background restoration is still in progress.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO28startupBackgroundTaskExpiredyA2CmF":{"name":"startupBackgroundTaskExpired","abstract":"<p>Startup background task has expired during state restoration.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO21multipleListenTrappedyA2CmF":{"name":"multipleListenTrapped","abstract":"<p>The original listen declared that duplicated listens are not allowed.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:7Bluejay0A5ErrorO22multipleListenReplacedyA2CmF":{"name":"multipleListenReplaced","abstract":"<p>The original listen declared that it can be replaced by a new listen.</p>","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:10Foundation14LocalizedErrorP16errorDescriptionSSSgvp":{"name":"errorDescription","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:10Foundation13CustomNSErrorP11errorDomainSSvpZ":{"name":"errorDomain","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:10Foundation13CustomNSErrorP9errorCodeSivp":{"name":"errorCode","parent_name":"BluejayError"},"Enums/BluejayError.html#/s:10Foundation13CustomNSErrorP13errorUserInfoSDySSypGvp":{"name":"errorUserInfo","parent_name":"BluejayError"},"Enums/DisconnectionResult.html#/s:7Bluejay19DisconnectionResultO12disconnectedyAcA20PeripheralIdentifierVcACmF":{"name":"disconnected(_:)","abstract":"<p>The disconnection is successful, and the disconnected peripheral is captured in the associated value.</p>","parent_name":"DisconnectionResult"},"Enums/DisconnectionResult.html#/s:7Bluejay19DisconnectionResultO7failureyACs5Error_pcACmF":{"name":"failure(_:)","abstract":"<p>The disconnection has failed unexpectedly with an error.</p>","parent_name":"DisconnectionResult"},"Enums/AutoReconnectMode.html#/s:7Bluejay17AutoReconnectModeO8noChangeyA2CmF":{"name":"noChange","abstract":"<p>Bluejay will maintain its current auto-reconnect behaviour.</p>","parent_name":"AutoReconnectMode"},"Enums/AutoReconnectMode.html#/s:7Bluejay17AutoReconnectModeO6changeyACSb_tcACmF":{"name":"change(shouldAutoReconnect:)","abstract":"<p>Override Bluejay&rsquo;s auto-reconnect behaviour.</p>","parent_name":"AutoReconnectMode"},"Enums/ConnectionResult.html#/s:7Bluejay16ConnectionResultO7successyAcA20PeripheralIdentifierVcACmF":{"name":"success(_:)","abstract":"<p>The connection is successful, and the peripheral connected is captured in the associated value.</p>","parent_name":"ConnectionResult"},"Enums/ConnectionResult.html#/s:7Bluejay16ConnectionResultO7failureyACs5Error_pcACmF":{"name":"failure(_:)","abstract":"<p>The connection has failed unexpectedly with an error.</p>","parent_name":"ConnectionResult"},"Enums/Timeout.html#/s:7Bluejay7TimeoutO7secondsyACSdcACmF":{"name":"seconds(_:)","abstract":"<p>Specify a timeout with a duration in seconds.</p>","parent_name":"Timeout"},"Enums/Timeout.html#/s:7Bluejay7TimeoutO4noneyA2CmF":{"name":"none","abstract":"<p>Specify there is no timeout.</p>","parent_name":"Timeout"},"Enums/BackgroundRestoreCompletion.html#/s:7Bluejay27BackgroundRestoreCompletionO8callbackyACyyccACmF":{"name":"callback(_:)","abstract":"<p>Put required Bluejay API or application calls that are needed after a background restoration inside this callback.</p>","parent_name":"BackgroundRestoreCompletion"},"Enums/BackgroundRestoreCompletion.html#/s:7Bluejay27BackgroundRestoreCompletionO8continueyA2CmF":{"name":"continue","abstract":"<p>Return this if no callback is needed after a background restoration.</p>","parent_name":"BackgroundRestoreCompletion"},"Enums/BackgroundRestoreMode.html#/s:7Bluejay21BackgroundRestoreModeO7disableyA2CmF":{"name":"disable","abstract":"<p>Bluejay will not start CoreBluetooth with state restoration.</p>","parent_name":"BackgroundRestoreMode"},"Enums/BackgroundRestoreMode.html#/s:7Bluejay21BackgroundRestoreModeO6enableyAcA0bC6ConfigVcACmF":{"name":"enable(_:)","abstract":"<p>Bluejay will start CoreBluetooth with state restoration.</p>","parent_name":"BackgroundRestoreMode"},"Enums/BackgroundRestoreMode.html":{"name":"BackgroundRestoreMode","abstract":"<p>Determines how Bluejay should opt-in to CoreBluetooth state restoration.</p>"},"Enums/BackgroundRestoreCompletion.html":{"name":"BackgroundRestoreCompletion","abstract":"<p>Allows capturing further Bluejay operations to be queued and executed after background restoration is completed.</p>"},"Enums/Timeout.html":{"name":"Timeout","abstract":"<p>Types of connection time outs. Can specify a time out in seconds, or no time out.</p>"},"Enums/ConnectionResult.html":{"name":"ConnectionResult","abstract":"<p>Indicates a successful, cancelled, or failed connection attempt, where the success case contains the peripheral connected to.</p>"},"Enums/AutoReconnectMode.html":{"name":"AutoReconnectMode","abstract":"<p>Tells Bluejay whether it should auto-reconnect.</p>"},"Enums/DisconnectionResult.html":{"name":"DisconnectionResult","abstract":"<p>Indicates a successful, cancelled, or failed disconnection attempt, where the success case contains the peripheral disconnected from.</p>"},"Enums/BluejayError.html":{"name":"BluejayError","abstract":"<p>Errors specific to Bluejay.</p>"},"Enums/ListenAction.html":{"name":"ListenAction","abstract":"<p>Indicates whether the current listen on a characteristic should continue or end.</p>"},"Enums/ListenRestoreAction.html":{"name":"ListenRestoreAction","abstract":"<p>Available actions to take on an unhandled listen event from background restoration.</p>"},"Enums/MultipleListenOption.html":{"name":"MultipleListenOption","abstract":"<p>Ways to handle calling listen on the same characteristic multiple times.</p>"},"Enums/ReadResult.html":{"name":"ReadResult","abstract":"<p>Indicates a successful, cancelled, or failed read attempt, where the success case contains the value read.</p>"},"Enums/RunResult.html":{"name":"RunResult","abstract":"<p>Indicates a successful, cancelled, or failed <code>run(backgroundTask:completionOnMainThread:)</code> attempt, where the success case contains the value returned at the end of the background task.</p>"},"Enums/ScanAction.html":{"name":"ScanAction","abstract":"<p>Indicates whether a scan should continue, continue but blacklist the current discovery, stop, or stop and connect.</p>"},"Enums/StartMode.html":{"name":"StartMode","abstract":"<p>Specifies whether to start a new Bluejay instance from scratch, or from an existing CoreBluetooth session.</p>"},"Enums/WriteResult.html":{"name":"WriteResult","abstract":"<p>Indicates a successful, cancelled, or failed write attempt.</p>"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC4read4fromxAA24CharacteristicIdentifierV_tKAA10ReceivableRzlF":{"name":"read(from:)","abstract":"<p>Read a value from the specified characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC5write2to5value4typeyAA24CharacteristicIdentifierV_xSo25CBCharacteristicWriteTypeVtKAA8SendableRzlF":{"name":"write(to:value:type:)","abstract":"<p>Write a value from the specified characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC12writeAndRead0D2To5value4type8readFromxAA24CharacteristicIdentifierV_q_So25CBCharacteristicWriteTypeVAJtKAA10ReceivableRzAA8SendableR_r0_lF":{"name":"writeAndRead(writeTo:value:type:readFrom:)","abstract":"<p>Write to one characterestic then reading a value from another.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC6listen2to7timeout10completionyAA24CharacteristicIdentifierV_AA7TimeoutOAA12ListenActionOxctKAA10ReceivableRzlF":{"name":"listen(to:timeout:completion:)","abstract":"<p>Listen for changes on a specified characterstic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC9endListen2to5error10completionyAA24CharacteristicIdentifierV_s5Error_pSgyAA11WriteResultOcSgtKF":{"name":"endListen(to:error:completion:)","abstract":"<p>Stop listening to a characteristic synchronously.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC11flushListen2to14nonZeroTimeout10completionyAA24CharacteristicIdentifierV_AA0I0OyyctKF":{"name":"flushListen(to:nonZeroTimeout:completion:)","abstract":"<p>Flush a listen to a characteristic by receiving and discarding values for the specified duration.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC14writeAndListen0D2To5value4type06listenG016timeoutInSeconds10completionyAA24CharacteristicIdentifierV_xSo25CBCharacteristicWriteTypeVALSiAA0F6ActionOq_ctKAA8SendableRzAA10ReceivableR_r0_lF":{"name":"writeAndListen(writeTo:value:type:listenTo:timeoutInSeconds:completion:)","abstract":"<p>Handle a compound operation consisting of writing on one characterstic followed by listening on another for some streamed data.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC16writeAndAssemble0D2To5value06listenG014expectedLength16timeoutInSeconds10completionyAA24CharacteristicIdentifierV_xALS2iAA12ListenActionOq_ctKAA8SendableRzAA10ReceivableR_r0_lF":{"name":"writeAndAssemble(writeTo:value:listenTo:expectedLength:timeoutInSeconds:completion:)","abstract":"<p>Similar to <code>writeAndListen</code>, but use this if you don&rsquo;t know or don&rsquo;t have control over how many packets will be sent to you. You still need to know the total size of the data you&rsquo;re receiving.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay22SynchronizedPeripheralC23maximumWriteValueLength3forSiSo016CBCharacteristicE4TypeV_tF":{"name":"maximumWriteValueLength(for:)","abstract":"<p>Ask for the peripheral&rsquo;s maximum payload length in bytes for a single write request.</p>","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay18ConnectionObserverP18bluetoothAvailableyySbF":{"name":"bluetoothAvailable(_:)","parent_name":"SynchronizedPeripheral"},"Classes/SynchronizedPeripheral.html#/s:7Bluejay18ConnectionObserverP12disconnected4fromyAA20PeripheralIdentifierV_tF":{"name":"disconnected(from:)","parent_name":"SynchronizedPeripheral"},"Classes/Bluejay.html#/s:7BluejayAAC4uuid10Foundation4UUIDVvp":{"name":"uuid","abstract":"<p>Helps distinguish one Bluejay instance from another.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC20isBluetoothAvailableSbvp":{"name":"isBluetoothAvailable","abstract":"<p>Allows checking whether Bluetooth is powered on. Also returns false if Bluejay is not started yet.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC30isBluetoothStateUpdateImminentSbvp":{"name":"isBluetoothStateUpdateImminent","abstract":"<p>Allows checking for if CoreBluetooth state is transitional (update is imminent)","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC12isConnectingSbvp":{"name":"isConnecting","abstract":"<p>Allows checking whether Bluejay is currently connecting to a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC11isConnectedSbvp":{"name":"isConnected","abstract":"<p>Allows checking whether Bluejay is currently connected to a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC15isDisconnectingSbvp":{"name":"isDisconnecting","abstract":"<p>Allows checking whether Bluejay is currently disconnecting from a peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC19shouldAutoReconnectSbvp":{"name":"shouldAutoReconnect","abstract":"<p>Allowing checking whether Bluejay will automatic reconnect after an unexpected disconnection. Default is true, and Bluejay will also always set this to true on a successful connection to a peripheral. Conversely, Bluejay will always set this to false after an explicit disconnection request.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10isScanningSbvp":{"name":"isScanning","abstract":"<p>Allows checking whether Bluejay is currently scanning.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10hasStartedSbvp":{"name":"hasStarted","abstract":"<p>Allows checking whether Bluejay has started and is available for use.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC21defaultWarningOptionsAA0cD0Vvp":{"name":"defaultWarningOptions","abstract":"<p>Warning options to use for each new connection if the options are not specified at the creation of those connections.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC30isBackgroundRestorationEnabledSbvp":{"name":"isBackgroundRestorationEnabled","abstract":"<p>Allows checking whether Bluejay has background restoration enabled.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC3logyySSF":{"name":"log(_:)","abstract":"<p>Allow apps that use Bluejay to log alongside of Bluejay&rsquo;s internal logs.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC7getLogsSSSgyF":{"name":"getLogs()","abstract":"<p>Get the current content of the log file.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC9clearLogsyyF":{"name":"clearLogs()","abstract":"<p>Clears the log file.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@M@Bluejay@objc(cs)Bluejay(im)init":{"name":"init()","abstract":"<p>Initializing a Bluejay instance will not yet initialize the CoreBluetooth stack. An explicit <code>start</code> call after Bluejay is intialized will then initialize the CoreBluetooth stack and is required because in cases where a state resotration is trying to restore a listen on a characteristic, a listen restorer must be available before the CoreBluetooth stack is re-initialized. This two-step startup allows you to prepare and gaurantee the setup of your listen restorer in between the initialization of Bluejay and the initialization of the CoreBluetooth stack.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC5start4modeyAA9StartModeO_tF":{"name":"start(mode:)","abstract":"<p>Starting Bluejay will initialize the CoreBluetooth stack. Simply initializing a Bluejay instance without calling this function will not initialize the CoreBluetooth stack. An explicit start call is required so that we can also support proper background restoration, where CoreBluetooth must be initialized in the AppDelegate&rsquo;s application(_:didFinishLaunchingWithOptions:) for both starting an iOS background task and for parsing the restore identifier.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC28stopAndExtractBluetoothStateSo16CBCentralManagerC7manager_So12CBPeripheralCSg10peripheraltyF":{"name":"stopAndExtractBluetoothState()","abstract":"<p>Stops all operations and clears all states in Bluejay before returning a Core Bluetooth state that can then be used by another library or code outside of Bluejay.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC16cancelEverything5error16shouldDisconnectys5Error_p_SbtF":{"name":"cancelEverything(error:shouldDisconnect:)","abstract":"<p>This will cancel the current and all pending operations in the Bluejay queue. It will also disconnect by default after the queue is emptied, but you can cancel everything without disconnecting.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC8register18connectionObserveryAA010ConnectionD0_p_tF":{"name":"register(connectionObserver:)","abstract":"<p>Register for notifications on Bluetooth connection events and state changes. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10unregister18connectionObserveryAA010ConnectionD0_p_tF":{"name":"unregister(connectionObserver:)","abstract":"<p>Unregister for notifications on Bluetooth connection events and state changes. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC8register12rssiObserveryAA12RSSIObserver_p_tF":{"name":"register(rssiObserver:)","abstract":"<p>Register for notifications when <code>readRSSI</code> is called. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10unregister12rssiObserveryAA12RSSIObserver_p_tF":{"name":"unregister(rssiObserver:)","abstract":"<p>Unregister for notifications when <code>readRSSI</code> is called. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC8register15serviceObserveryAA07ServiceD0_p_tF":{"name":"register(serviceObserver:)","abstract":"<p>Register for notifications when a connected peripheral&rsquo;s services change. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10unregister15serviceObserveryAA07ServiceD0_p_tF":{"name":"unregister(serviceObserver:)","abstract":"<p>Unregister for notifications when a connected peripheral&rsquo;s services change. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC8register11logObserveryAA03LogD0_p_tF":{"name":"register(logObserver:)","abstract":"<p>Register for notifications when the log file is updated. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10unregister11logObserveryAA03LogD0_p_tF":{"name":"unregister(logObserver:)","abstract":"<p>Unregister for notifications when the log file is updated. Unregistering is not required, Bluejay will unregister for you if the observer is no longer in memory.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC25registerDisconnectHandler7handleryAA0cD0_p_tF":{"name":"registerDisconnectHandler(handler:)","abstract":"<p>Register a single disconnection handler for giving it a final say on what to do at the end of a disconnection, as well as evaluate and control Bluejay&rsquo;s auto-reconnect behaviour.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC27unregisterDisconnectHandleryyF":{"name":"unregisterDisconnectHandler()","abstract":"<p>Remove any registered disconnection handler.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC4scan8duration15allowDuplicates17throttleRSSIDelta18serviceIdentifiers9discovery7expired7stoppedySd_SbSiSayAA17ServiceIdentifierVGSgAA10ScanActionOAA0O9DiscoveryV_SayARGtcApR_AStcSgyAS_s5Error_pSgtctF":{"name":"scan(duration:allowDuplicates:throttleRSSIDelta:serviceIdentifiers:discovery:expired:stopped:)","abstract":"<p>Scan for the peripheral(s) specified.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC12stopScanningyyF":{"name":"stopScanning()","abstract":"<p>Stops current or queued scan.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC7connect_7timeout14warningOptions10completionyAA20PeripheralIdentifierV_AA7TimeoutOAA07WarningE0VSgyAA16ConnectionResultOctF":{"name":"connect(_:timeout:warningOptions:completion:)","abstract":"<p>Attempt to connect directly to a known peripheral. The call will fail if Bluetooth is not available, or if Bluejay is already connected. Making a connection request while Bluejay is scanning will also cause Bluejay to stop the current scan for you behind the scene prior to fulfilling your connection request.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC10disconnect9immediate10completionySb_yAA19DisconnectionResultOcSgtF":{"name":"disconnect(immediate:completion:)","abstract":"<p>Disconnect a connected peripheral or cancel a connecting peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC4read4from10completionyAA24CharacteristicIdentifierV_yAA10ReadResultOyxGctAA10ReceivableRzlF":{"name":"read(from:completion:)","abstract":"<p>Read from the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC5write2to5value4type10completionyAA24CharacteristicIdentifierV_xSo25CBCharacteristicWriteTypeVyAA0J6ResultOctAA8SendableRzlF":{"name":"write(to:value:type:completion:)","abstract":"<p>Write to the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC6listen2to20multipleListenOption10completionyAA24CharacteristicIdentifierV_AA08MultipleeF0OyAA10ReadResultOyxGctAA10ReceivableRzlF":{"name":"listen(to:multipleListenOption:completion:)","abstract":"<p>Listen for notifications on the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC9endListen2to10completionyAA24CharacteristicIdentifierV_yAA11WriteResultOcSgtF":{"name":"endListen(to:completion:)","abstract":"<p>End listening on the specified characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC11isListening2toSbAA24CharacteristicIdentifierV_tKF":{"name":"isListening(to:)","abstract":"<p>Check if a peripheral is listening to a specific characteristic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC8readRSSIyyKF":{"name":"readRSSI()","abstract":"<p>Attempts to read the RSSI (signal strength) of the currently connected peripheral.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC3run14backgroundTask22completionOnMainThreadyyAA22SynchronizedPeripheralCKc_yAA9RunResultOyytGctF":{"name":"run(backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This is the simplest one as the background task will not return any typed values back to the completion block on finishing the background task, except for thrown errors, and it also doesn&rsquo;t provide an input for an object that might need thread safe access.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC3run14backgroundTask22completionOnMainThreadyxAA22SynchronizedPeripheralCKc_yAA9RunResultOyxGctlF":{"name":"run(backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This one allows the background task to potentially return a typed value back to the completion block on finishing the background task successfully.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC3run8userData14backgroundTask22completionOnMainThreadyx_q_AA22SynchronizedPeripheralC_xtKcyAA9RunResultOyq_Gctr0_lF":{"name":"run(userData:backgroundTask:completionOnMainThread:)","abstract":"<p>One of the three ways to run a background task using a synchronous interface to the Bluetooth peripheral. This one allows the background task to potentially return a typed value back to the completion block on finishing the background task successfully, as well as supplying an object for thread safe access inside the background task.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/s:7BluejayAAC7combine9sendables10Foundation4DataVSayAA8Sendable_pG_tFZ":{"name":"combine(sendables:)","abstract":"<p>A helper function to take an array of Sendables and combine their data together.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManagerDidUpdateState:":{"name":"centralManagerDidUpdateState(_:)","abstract":"<p>Bluejay uses this to figure out whether Bluetooth is available or not.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManager:willRestoreState:":{"name":"centralManager(_:willRestoreState:)","abstract":"<p>If Core Bluetooth will restore state, update Bluejay&rsquo;s internal states to match the states of the Core Bluetooth stack by assigning the peripheral to <code>connectingPeripheral</code> or <code>connectedPeripheral</code>, or niling them out, depending on what the restored <code>CBPeripheral</code> state is.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManager:didConnectPeripheral:":{"name":"centralManager(_:didConnect:)","abstract":"<p>When connected, update Bluejay&rsquo;s states by updating the values for <code>connectingPeripheral</code>, <code>connectedPeripheral</code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Bluejay.html#/s:7BluejayAAC19shouldAutoReconnectSbvp\">shouldAutoReconnect</a></code>. Also, make sure to broadcast the event to observers, and notify the queue so that the current operation in-flight can process this event and get a chance to finish.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManager:didDisconnectPeripheral:error:":{"name":"centralManager(_:didDisconnectPeripheral:error:)","abstract":"<p>Handle a disconnection event from Core Bluetooth by figuring out what kind of disconnection it is (planned or unplanned), and updating Bluejay&rsquo;s internal state and sending notifications as appropriate.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManager:didFailToConnectPeripheral:error:":{"name":"centralManager(_:didFailToConnect:error:)","abstract":"<p>This mostly happens when either the Bluetooth device or the Core Bluetooth stack somehow only partially completes the negotiation of a connection. For simplicity, Bluejay is currently treating this as a disconnection event, so it can perform all the same clean up logic.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html#/c:@CM@Bluejay@objc(cs)Bluejay(im)centralManager:didDiscoverPeripheral:advertisementData:RSSI:":{"name":"centralManager(_:didDiscover:advertisementData:rssi:)","abstract":"<p>This should only be called when the current operation in the queue is a <code>Scan</code> task.</p>","parent_name":"Bluejay"},"Classes/Bluejay.html":{"name":"Bluejay","abstract":"<p>Bluejay is a simple wrapper around CoreBluetooth that focuses on making a common usage case as straight forward as possible: a single connected peripheral that the user is interacting with regularly (think most personal electronics devices that have an associated iOS app: fitness trackers, guitar amps, etc).</p>"},"Classes/SynchronizedPeripheral.html":{"name":"SynchronizedPeripheral","abstract":"<p>A synchronous interface to the Bluetooth peripheral, intended to be used inside the backgroundTask block of <code>run(backgroundTask:completionOnMainThread:)</code> to perform multi-part operations without the need for a complicated callback or promise setup.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}